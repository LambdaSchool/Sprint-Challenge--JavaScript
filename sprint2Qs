

1. Briefly compare and contrast `.forEach` & `.map` (2-3 sentences max)

    Both are similar however .map returns a new array with transformed 
    elements while .forEach returns undefined. Also .map is chainable 
    while .forEach is not. This means .map can handle other calls like 
    .sort or .reduce after the .map call. This is something .forEach
    is not capable of. Also both methods do not mutate the array's 
    elements on its own without a callback function in use to do so. 


2. Explain the difference between a callback and a higher order function.

    A higher order function is the outer scope block within the function 
    a global scope could call. However a callback function can not be 
    invoked or called by the global scope. Only the higher order function's
    scope is capable of accessing the callback function. 

3. What is closure?
    
    Closure is a scope block a variable or function can be accessable within.
    Depending on how many nested curly braces there are closure can be increased
    or decreased. 

4. Describe the four rules of the 'this' keyword.

1.  Simple Function call: Where global functions defaults to the global object and in 
    strict mode they will default to undefined

2.  Implicit value: The Implicit value points to the object from which it is called 
    and accounts for the majority of day to day code examples of this. This as an
    Implicit value is what is to the left of the assignment operator. Which is used 
    when a constructor's value is referenced. 


3. Explicti Value: Used when assigning a specific function or variable a value
    for Prototypes bind apply or call all use this as a explicit value. In classes 
    this is similar to passing in values throug the super keyword or when assigning
    a function to a variable to return an explicitvalue as the bind functions does.  


4. new binding: Using the new keyword constructs a new object and this points to it. 
    So when a function is invoked as a constructor function the this will then point
    to the new object created to the left of the assignment operator. 





5. Why do we need super() in an extended class?

    Super in a extended class will allow the parent class to be accessible from
    the child class. So all properties a parent class have the child class will
    as well by just adding in the paramerters need within the parent construtor 
    through the super function inside of the child class. 



Charise Arter:lambdawb:  20:55
Notes for you on JavaScript
https://lambda-students.slack.com/archives/G016RFVJGQ4/p1597290124112700
20:55
https://lambda-students.slack.com/archives/G016RFVJGQ4/p1597290075112200
20:56
I have no idea if this will show....
https://codepen.io/charisearter/pen/PoPzegK
https://codepen.io/charisearter/pen/rNOLvXE
https://codepen.io/charisearter/pen/pojEdbJ
https://codepen.io/charisearter/pen/LYpRmPg
https://codepen.io/charisearter/pen/yLYapeo
https://codepen.io/charisearter/pen/zYvojJL
https://codepen.io/charisearter/pen/YzyNygv
https://codepen.io/charisearter/pen/PoPWgGg
Basics of JAvaScript: https://codepen.io/charisearter/pen/WNQpjLd
Objects & Arrays: https://codepen.io/charisearter/pen/wvKJdNq
Prototypes and Inheritance notes: https://codepen.io/charisearter/pen/ExVWmBB
